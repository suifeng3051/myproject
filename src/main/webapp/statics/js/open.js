$(document).ready(function(){

    $(".needTip").tooltip(); // 绑定提示信息

	$('#date-start').datetimepicker({ // 绑定时间选择器
				    format: 'yyyy-mm-dd HH:ii',
				    todayBtn: 1,
				    todayHighlight: 1,
				    weekStart: 1,
				    startView: 2,
                    forceParse: 0,
					pickerPosition: "bottom-left",
					showMeridian: true,
					autoclose: true,
					initialDate: "2015-01-01 12:12"
				}).on("changeDate", function(e){
                    var currentDate = e.date.valueOf()/1000;
                    if(currentDate != null){ // 用户选择了时间
                        console.log(currentDate);
                    }else{ // 用户删除了时间
                    }
                });
    $('#date-end').datetimepicker({ // 绑定时间选择器
                    format: 'yyyy-mm-dd HH:ii',
                    todayBtn: 1,
                    todayHighlight: 1,
                    weekStart: 1,
                    startView: 2,
                    forceParse: 0,
                    pickerPosition: "bottom-left",
                    showMeridian: true,
                    autoclose: true
                }).on("changeDate", function(e){
                    var currentDate = e.date.valueOf()/1000;
                    if(currentDate != null){ // 用户选择了时间
                        console.log(currentDate);
                    }else{ // 用户删除了时间
                    }
                });
    $("#methodForm").validate(); // 绑定表单验证控件
    $("#methodForm2").validate(); // 绑定表单验证控件
    $("#methodForm3").validate(); // 绑定表单验证控件
    $("#methodForm4").validate(); // 绑定表单验证控件


Highcharts.theme = {
	colors: ["#2b908f", "#90ee7e", "#f45b5b", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee",
		"#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
	chart: {
		backgroundColor: {
			linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
			stops: [
				[0, '#2a2a2b'],
				[1, '#3e3e40']
			]
		},
		style: {
			fontFamily: "'Unica One', sans-serif"
		},
		plotBorderColor: '#606063'
	},
	title: {
		style: {
			color: '#E0E0E3',
			textTransform: 'uppercase',
			fontSize: '20px'
		}
	},
	subtitle: {
		style: {
			color: '#E0E0E3',
			textTransform: 'uppercase'
		}
	},
	xAxis: {
		gridLineColor: '#707073',
		labels: {
			style: {
				color: '#E0E0E3'
			}
		},
		lineColor: '#707073',
		minorGridLineColor: '#505053',
		tickColor: '#707073',
		title: {
			style: {
				color: '#A0A0A3'

			}
		}
	},
	yAxis: {
		gridLineColor: '#707073',
		labels: {
			style: {
				color: '#E0E0E3'
			}
		},
		lineColor: '#707073',
		minorGridLineColor: '#505053',
		tickColor: '#707073',
		tickWidth: 1,
		title: {
			style: {
				color: '#A0A0A3'
			}
		}
	},
	tooltip: {
		backgroundColor: 'rgba(0, 0, 0, 0.85)',
		style: {
			color: '#F0F0F0'
		}
	},
	plotOptions: {
		series: {
			dataLabels: {
				color: '#B0B0B3'
			},
			marker: {
				lineColor: '#333'
			}
		},
		boxplot: {
			fillColor: '#505053'
		},
		candlestick: {
			lineColor: 'white'
		},
		errorbar: {
			color: 'white'
		}
	},
	legend: {
		itemStyle: {
			color: '#E0E0E3'
		},
		itemHoverStyle: {
			color: '#FFF'
		},
		itemHiddenStyle: {
			color: '#606063'
		}
	},
	credits: {
		style: {
			color: '#666'
		}
	},
	labels: {
		style: {
			color: '#707073'
		}
	},

	drilldown: {
		activeAxisLabelStyle: {
			color: '#F0F0F3'
		},
		activeDataLabelStyle: {
			color: '#F0F0F3'
		}
	},

	navigation: {
		buttonOptions: {
			symbolStroke: '#DDDDDD',
			theme: {
				fill: '#505053'
			}
		}
	},

	// scroll charts
	rangeSelector: {
		buttonTheme: {
			fill: '#505053',
			stroke: '#000000',
			style: {
				color: '#CCC'
			},
			states: {
				hover: {
					fill: '#707073',
					stroke: '#000000',
					style: {
						color: 'white'
					}
				},
				select: {
					fill: '#000003',
					stroke: '#000000',
					style: {
						color: 'white'
					}
				}
			}
		},
		inputBoxBorderColor: '#505053',
		inputStyle: {
			backgroundColor: '#333',
			color: 'silver'
		},
		labelStyle: {
			color: 'silver'
		}
	},

	navigator: {
		handles: {
			backgroundColor: '#666',
			borderColor: '#AAA'
		},
		outlineColor: '#CCC',
		maskFill: 'rgba(255,255,255,0.1)',
		series: {
			color: '#7798BF',
			lineColor: '#A6C7ED'
		},
		xAxis: {
			gridLineColor: '#505053'
		}
	},

	scrollbar: {
		barBackgroundColor: '#808083',
		barBorderColor: '#808083',
		buttonArrowColor: '#CCC',
		buttonBackgroundColor: '#606063',
		buttonBorderColor: '#606063',
		rifleColor: '#FFF',
		trackBackgroundColor: '#404043',
		trackBorderColor: '#404043'
	},

	// special colors for some of the
	legendBackgroundColor: 'rgba(0, 0, 0, 0.5)',
	background2: '#505053',
	dataLabelsColor: '#B0B0B3',
	textColor: '#C0C0C0',
	contrastTextColor: '#F0F0F3',
	maskColor: 'rgba(255,255,255,0.3)'
};

// Apply the theme
Highcharts.setOptions(Highcharts.theme);
    // 调用次数图表展示
    Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
    $("#callcount").highcharts({
        chart: {
            type: 'spline',
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 10,
            events: {
                load: function () {

                    // set up the updating of the chart each second
                    var series = this.series[0];
                    setInterval(function () {
                        var x = (new Date()).getTime(), // current time
                            y = Math.random();
                        series.addPoint([x, y], true, true);
                    }, 60*1000);
                }
            }
        },
        title: {
            text: '每分钟动态更新实时数据'
        },
        xAxis: {
            type: 'datetime',
            //tickPixelInterval: 150,

        },
        yAxis: {
            title: {
                text: 'Count'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        tooltip: {
            formatter: function () {
                return '<b>' + this.series.name + '</b><br/>' +
                    Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                    Highcharts.numberFormat(this.y, 2);
            }
        },
        legend: {
            enabled: false
        },
        exporting: {
            enabled: false
        },
        series: [{
            name: 'call count',
            pointInterval: 60 * 1000, // 一分钟
            data: (function () {
                // generate an array of random data
                var data = [],
                    time = (new Date()).getTime(),
                    i;

                for (i = -19; i <= 0; i += 1) {
                    data.push({
                        x: time + i * 60 * 1000,
                        y: Math.random()
                    });
                }
                return data;
            }())
        }],
        credits:{
            text:"www.zitech.com"
        }
    });

    $("#rt").highcharts({
         chart: {
             type: 'spline',
             animation: Highcharts.svg, // don't animate in old IE
             marginRight: 10,
             events: {
                 load: function () {

                     // set up the updating of the chart each second
                     var series = this.series[0];
                     setInterval(function () {
                         var x = (new Date()).getTime(), // current time
                             y = Math.random();
                         series.addPoint([x, y], true, true);
                     }, 10*1000);
                 }
             }
         },
         title: {
             text: 'rt实时数据'
         },
         xAxis: {
             type: 'datetime',
             //tickPixelInterval: 150,

         },
         yAxis: {
             title: {
                 text: 'Count'
             },
             plotLines: [{
                 value: 0,
                 width: 1,
                 color: '#808080'
             }]
         },
         tooltip: {
             formatter: function () {
                 return '<b>' + this.series.name + '</b><br/>' +
                     Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                     Highcharts.numberFormat(this.y, 2);
             }
         },
         legend: {
             enabled: false
         },
         exporting: {
             enabled: false
         },
         series: [{
             name: 'call count',
             pointInterval: 10 * 1000, // 一分钟
             data: (function () {
                 // generate an array of random data
                 var data = [],
                     time = (new Date()).getTime(),
                     i;

                 for (i = -19; i <= 0; i += 1) {
                     data.push({
                         x: time + i * 10 * 1000,
                         y: Math.random()
                     });
                 }
                 return data;
             }())
         }],
         credits:{
             text:"www.zitech.com"
         }
     });

     $("#failcount").highcharts({
          chart: {
              type: 'spline',
              animation: Highcharts.svg, // don't animate in old IE
              marginRight: 10,
              events: {
                  load: function () {

                      // set up the updating of the chart each second
                      var series = this.series[0];
                      setInterval(function () {
                          var x = (new Date()).getTime(), // current time
                              y = Math.random();
                          series.addPoint([x, y], true, true);
                      }, 10*1000);
                  }
              }
          },
          title: {
              text: '错误次数实时更新'
          },
          xAxis: {
              type: 'datetime',
              //tickPixelInterval: 150,

          },
          yAxis: {
              title: {
                  text: 'Count'
              },
              plotLines: [{
                  value: 0,
                  width: 1,
                  color: '#808080'
              }]
          },
          tooltip: {
              formatter: function () {
                  return '<b>' + this.series.name + '</b><br/>' +
                      Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                      Highcharts.numberFormat(this.y, 2);
              }
          },
          legend: {
              enabled: false
          },
          exporting: {
              enabled: false
          },
          series: [{
              name: 'call count',
              pointInterval: 10 * 1000, // 一分钟
              data: (function () {
                  // generate an array of random data
                  var data = [],
                      time = (new Date()).getTime(),
                      i;

                  for (i = -19; i <= 0; i += 1) {
                      data.push({
                          x: time + i * 10 * 1000,
                          y: Math.random()
                      });
                  }
                  return data;
              }())
          }],
          credits:{
              text:"www.zitech.com"
          }
      });


    $("#callcountStatic").highcharts({
         chart: {
             zoomType: 'x'
         },
         title: {
             text: '每分钟调用次数'
         },
         xAxis: {
             type: 'datetime',
             minRange: 14 * 24 * 3600000 // fourteen days
         },
         yAxis: {
             title: {
                 text: 'call count'
             }
         },
         legend: {
             enabled: false
         },
         plotOptions: {
             area: {
                 fillColor: {
                     linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
                     stops: [
                         [0, Highcharts.getOptions().colors[0]],
                         [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                     ]
                 },
                 marker: {
                     radius: 2
                 },
                 lineWidth: 1,
                 states: {
                     hover: {
                         lineWidth: 1
                     }
                 },
                 threshold: null
             }
         },

         series: [{
             type: 'area',
             name: 'call count',
             pointInterval: 1 * 3600 * 1000,
             pointStart: Date.UTC(2006, 0, 1),
             data: [
                 0.8446, 0.8445, 0.8444, 0.8451,    0.8418, 0.8264,    0.8258, 0.8232,    0.8233, 0.8258,
                 0.8283, 0.8278, 0.8256, 0.8292,    0.8239, 0.8239,    0.8245, 0.8265,    0.8261, 0.8269,
                 0.8273, 0.8244, 0.8244, 0.8172,    0.8139, 0.8146,    0.8164, 0.82,    0.8269, 0.8269,
                 0.8269, 0.8258, 0.8247, 0.8286,    0.8289, 0.8316,    0.832, 0.8333,    0.8352, 0.8357,
                 0.8355, 0.8354, 0.8403, 0.8403,    0.8406, 0.8403,    0.8396, 0.8418,    0.8409, 0.8384,
                 0.8386, 0.8372, 0.839, 0.84, 0.8389, 0.84, 0.8423, 0.8423, 0.8435, 0.8422,
                 0.838, 0.8373, 0.8316, 0.8303,    0.8303, 0.8302,    0.8369, 0.84, 0.8385, 0.84,
                 0.8401, 0.8402, 0.8381, 0.8351,    0.8314, 0.8273,    0.8213, 0.8207,    0.8207, 0.8215,
                 0.8242, 0.8273, 0.8301, 0.8346,    0.8312, 0.8312,    0.8312, 0.8306,    0.8327, 0.8282,
                 0.824, 0.8255, 0.8256, 0.8273, 0.8209, 0.8151, 0.8149, 0.8213, 0.8273, 0.8273,
                 0.8261, 0.8252, 0.824, 0.8262, 0.8258, 0.8261, 0.826, 0.8199, 0.8153, 0.8097,
                 0.8101, 0.8119, 0.8107, 0.8105,    0.8084, 0.8069,    0.8047, 0.8023,    0.7965, 0.7919,
                 0.7921, 0.7922, 0.7934, 0.7918,    0.7915, 0.787, 0.7861, 0.7861, 0.7853, 0.7867,
                 0.7827, 0.7834, 0.7766, 0.7751, 0.7739, 0.7767, 0.7802, 0.7788, 0.7828, 0.7816,
                 0.7829, 0.783, 0.7829, 0.7781, 0.7811, 0.7831, 0.7826, 0.7855, 0.7855, 0.7845,
                 0.7798, 0.7777, 0.7822, 0.7785, 0.7744, 0.7743, 0.7726, 0.7766, 0.7806, 0.785,
                 0.7907, 0.7912, 0.7913, 0.7931, 0.7952, 0.7951, 0.7928, 0.791, 0.7913, 0.7912,
                 0.7941, 0.7953, 0.7921, 0.7919, 0.7968, 0.7999, 0.7999, 0.7974, 0.7942, 0.796,
                 0.7969, 0.7862, 0.7821, 0.7821, 0.7821, 0.7811, 0.7833, 0.7849, 0.7819, 0.7809,
                 0.7809, 0.7827, 0.7848, 0.785, 0.7873, 0.7894, 0.7907, 0.7909, 0.7947, 0.7987,
                 0.799, 0.7927, 0.79, 0.7878, 0.7878, 0.7907, 0.7922, 0.7937, 0.786, 0.787,
                 0.7838, 0.7838, 0.7837, 0.7836, 0.7806, 0.7825, 0.7798, 0.777, 0.777, 0.7772,
                 0.7793, 0.7788, 0.7785, 0.7832, 0.7865, 0.7865, 0.7853, 0.7847, 0.7809, 0.778,
                 0.7799, 0.78, 0.7801, 0.7765, 0.7785, 0.7811, 0.782, 0.7835, 0.7845, 0.7844,
                 0.782, 0.7811, 0.7795, 0.7794, 0.7806, 0.7794, 0.7794, 0.7778, 0.7793, 0.7808,
                 0.7824, 0.787, 0.7894, 0.7893, 0.7882, 0.7871, 0.7882, 0.7871, 0.7878, 0.79,
                 0.7901, 0.7898, 0.7879, 0.7886, 0.7858, 0.7814, 0.7825, 0.7826, 0.7826, 0.786,
                 0.7878, 0.7868, 0.7883, 0.7893, 0.7892, 0.7876, 0.785, 0.787, 0.7873, 0.7901,
                 0.7936, 0.7939, 0.7938, 0.7956, 0.7975, 0.7978, 0.7972, 0.7995, 0.7995, 0.7994,
                 0.7976, 0.7977, 0.796, 0.7922, 0.7928, 0.7929, 0.7948, 0.797, 0.7953, 0.7907,
                 0.7872, 0.7852, 0.7852, 0.786, 0.7862, 0.7836, 0.7837, 0.784, 0.7867, 0.7867,
                 0.7869, 0.7837, 0.7827, 0.7825, 0.7779, 0.7791, 0.779, 0.7787, 0.78, 0.7807,
                 0.7803, 0.7817, 0.7799, 0.7799, 0.7795, 0.7801, 0.7765, 0.7725, 0.7683, 0.7641,
                 0.7639, 0.7616, 0.7608, 0.759, 0.7582, 0.7539, 0.75, 0.75, 0.7507, 0.7505,
                 0.7516, 0.7522, 0.7531, 0.7577, 0.7577, 0.7582, 0.755, 0.7542, 0.7576, 0.7616,
                 0.7648, 0.7648, 0.7641, 0.7614, 0.757, 0.7587, 0.7588, 0.762, 0.762, 0.7617,
                 0.7618, 0.7615, 0.7612, 0.7596, 0.758, 0.758, 0.758, 0.7547, 0.7549, 0.7613,
                 0.7655, 0.7693, 0.7694, 0.7688, 0.7678, 0.7708, 0.7727, 0.7749, 0.7741, 0.7741,
                 0.7732, 0.7727, 0.7737, 0.7724, 0.7712, 0.772, 0.7721, 0.7717, 0.7704, 0.769,
                 0.7711, 0.774, 0.7745, 0.7745, 0.774, 0.7716, 0.7713, 0.7678, 0.7688, 0.7718,
                 0.7718, 0.7728, 0.7729, 0.7698, 0.7685, 0.7681, 0.769, 0.769, 0.7698, 0.7699,
                 0.7651, 0.7613, 0.7616, 0.7614, 0.7614, 0.7607, 0.7602, 0.7611, 0.7622, 0.7615,
                 0.7598, 0.7598, 0.7592, 0.7573, 0.7566, 0.7567, 0.7591, 0.7582, 0.7585, 0.7613,
                 0.7631, 0.7615, 0.76, 0.7613, 0.7627, 0.7627, 0.7608, 0.7583, 0.7575, 0.7562,
                 0.752, 0.7512, 0.7512, 0.7517, 0.752, 0.7511, 0.748, 0.7509, 0.7531, 0.7531,
                 0.7527, 0.7498, 0.7493, 0.7504, 0.75, 0.7491, 0.7491, 0.7485, 0.7484, 0.7492,
                 0.7471, 0.7459, 0.7477, 0.7477, 0.7483, 0.7458, 0.7448, 0.743, 0.7399, 0.7395,
                 0.7395, 0.7378, 0.7382, 0.7362, 0.7355, 0.7348, 0.7361, 0.7361, 0.7365, 0.7362,
                 0.7331, 0.7339, 0.7344, 0.7327, 0.7327, 0.7336, 0.7333, 0.7359, 0.7359, 0.7372,
                 0.736, 0.736, 0.735, 0.7365, 0.7384, 0.7395, 0.7413, 0.7397, 0.7396, 0.7385,
                 0.7378, 0.7366, 0.74, 0.7411, 0.7406, 0.7405, 0.7414, 0.7431, 0.7431, 0.7438,
                 0.7443, 0.7443, 0.7443, 0.7434, 0.7429, 0.7442, 0.744, 0.7439, 0.7437, 0.7437,
                 0.7429, 0.7403, 0.7399, 0.7418, 0.7468, 0.748, 0.748, 0.749, 0.7494, 0.7522,
                 0.7515, 0.7502, 0.7472, 0.7472, 0.7462, 0.7455, 0.7449, 0.7467, 0.7458, 0.7427,
                 0.7427, 0.743, 0.7429, 0.744, 0.743, 0.7422, 0.7388, 0.7388, 0.7369, 0.7345,
                 0.7345, 0.7345, 0.7352, 0.7341, 0.7341, 0.734, 0.7324, 0.7272, 0.7264, 0.7255,
                 0.7258, 0.7258, 0.7256, 0.7257, 0.7247, 0.7243, 0.7244, 0.7235, 0.7235, 0.7235,
                 0.7235, 0.7262, 0.7288, 0.7301, 0.7337, 0.7337, 0.7324, 0.7297, 0.7317, 0.7315,
                 0.7288, 0.7263, 0.7263, 0.7242, 0.7253, 0.7264, 0.727, 0.7312, 0.7305, 0.7305,
                 0.7318, 0.7358, 0.7409, 0.7454, 0.7437, 0.7424, 0.7424, 0.7415, 0.7419, 0.7414,
                 0.7377, 0.7355, 0.7315, 0.7315, 0.732, 0.7332, 0.7346, 0.7328, 0.7323, 0.734,
                 0.734, 0.7336, 0.7351, 0.7346, 0.7321, 0.7294, 0.7266, 0.7266, 0.7254, 0.7242,
                 0.7213, 0.7197, 0.7209, 0.721, 0.721, 0.721, 0.7209, 0.7159, 0.7133, 0.7105,
                 0.7099, 0.7099, 0.7093, 0.7093, 0.7076, 0.707, 0.7049, 0.7012, 0.7011, 0.7019,
                 0.7046, 0.7063, 0.7089, 0.7077, 0.7077, 0.7077, 0.7091, 0.7118, 0.7079, 0.7053,
                 0.705, 0.7055, 0.7055, 0.7045, 0.7051, 0.7051, 0.7017, 0.7, 0.6995, 0.6994,
                 0.7014, 0.7036, 0.7021, 0.7002, 0.6967, 0.695, 0.695, 0.6939, 0.694, 0.6922,
                 0.6919, 0.6914, 0.6894, 0.6891, 0.6904, 0.689, 0.6834, 0.6823, 0.6807, 0.6815,
                 0.6815, 0.6847, 0.6859, 0.6822, 0.6827, 0.6837, 0.6823, 0.6822, 0.6822, 0.6792,
                 0.6746, 0.6735, 0.6731, 0.6742, 0.6744, 0.6739, 0.6731, 0.6761, 0.6761, 0.6785,
                 0.6818, 0.6836, 0.6823, 0.6805, 0.6793, 0.6849, 0.6833, 0.6825, 0.6825, 0.6816,
                 0.6799, 0.6813, 0.6809, 0.6868, 0.6933, 0.6933, 0.6945, 0.6944, 0.6946, 0.6964,
                 0.6965, 0.6956, 0.6956, 0.695, 0.6948, 0.6928, 0.6887, 0.6824, 0.6794, 0.6794,
                 0.6803, 0.6855, 0.6824, 0.6791, 0.6783, 0.6785, 0.6785, 0.6797, 0.68, 0.6803,
                 0.6805, 0.676, 0.677, 0.677, 0.6736, 0.6726, 0.6764, 0.6821, 0.6831, 0.6842,
                 0.6842, 0.6887, 0.6903, 0.6848, 0.6824, 0.6788, 0.6814, 0.6814, 0.6797, 0.6769,
                 0.6765, 0.6733, 0.6729, 0.6758, 0.6758, 0.675, 0.678, 0.6833, 0.6856, 0.6903,
                 0.6896, 0.6896, 0.6882, 0.6879, 0.6862, 0.6852, 0.6823, 0.6813, 0.6813, 0.6822,
                 0.6802, 0.6802, 0.6784, 0.6748, 0.6747, 0.6747, 0.6748, 0.6733, 0.665, 0.6611,
                 0.6583, 0.659, 0.659, 0.6581, 0.6578, 0.6574, 0.6532, 0.6502, 0.6514, 0.6514,
                 0.6507, 0.651, 0.6489, 0.6424, 0.6406, 0.6382, 0.6382, 0.6341, 0.6344, 0.6378,
                 0.6439, 0.6478, 0.6481, 0.6481, 0.6494, 0.6438, 0.6377, 0.6329, 0.6336, 0.6333,
                 0.6333, 0.633, 0.6371, 0.6403, 0.6396, 0.6364, 0.6356, 0.6356, 0.6368, 0.6357,
                 0.6354, 0.632, 0.6332, 0.6328, 0.6331, 0.6342, 0.6321, 0.6302, 0.6278, 0.6308,
                 0.6324, 0.6324, 0.6307, 0.6277, 0.6269, 0.6335, 0.6392, 0.64, 0.6401, 0.6396,
                 0.6407, 0.6423, 0.6429, 0.6472, 0.6485, 0.6486, 0.6467, 0.6444, 0.6467, 0.6509,
                 0.6478, 0.6461, 0.6461, 0.6468, 0.6449, 0.647, 0.6461, 0.6452, 0.6422, 0.6422,
                 0.6425, 0.6414, 0.6366, 0.6346, 0.635, 0.6346, 0.6346, 0.6343, 0.6346, 0.6379,
                 0.6416, 0.6442, 0.6431, 0.6431, 0.6435, 0.644, 0.6473, 0.6469, 0.6386, 0.6356,
                 0.634, 0.6346, 0.643, 0.6452, 0.6467, 0.6506, 0.6504, 0.6503, 0.6481, 0.6451,
                 0.645, 0.6441, 0.6414, 0.6409, 0.6409, 0.6428, 0.6431, 0.6418, 0.6371, 0.6349,
                 0.6333, 0.6334, 0.6338, 0.6342, 0.632, 0.6318, 0.637, 0.6368, 0.6368, 0.6383,
                 0.6371, 0.6371, 0.6355, 0.632, 0.6277, 0.6276, 0.6291, 0.6274, 0.6293, 0.6311,
                 0.631, 0.6312, 0.6312, 0.6304, 0.6294, 0.6348, 0.6378, 0.6368, 0.6368, 0.6368,
                 0.636, 0.637, 0.6418, 0.6411, 0.6435, 0.6427, 0.6427, 0.6419, 0.6446, 0.6468,
                 0.6487, 0.6594, 0.6666, 0.6666, 0.6678, 0.6712, 0.6705, 0.6718, 0.6784, 0.6811,
                 0.6811, 0.6794, 0.6804, 0.6781, 0.6756, 0.6735, 0.6763, 0.6762, 0.6777, 0.6815,
                 0.6802, 0.678, 0.6796, 0.6817, 0.6817, 0.6832, 0.6877, 0.6912, 0.6914, 0.7009,
                 0.7012, 0.701, 0.7005, 0.7076, 0.7087, 0.717, 0.7105, 0.7031, 0.7029, 0.7006,
                 0.7035, 0.7045, 0.6956, 0.6988, 0.6915, 0.6914, 0.6859, 0.6778, 0.6815, 0.6815,
                 0.6843, 0.6846, 0.6846, 0.6923, 0.6997, 0.7098, 0.7188, 0.7232, 0.7262, 0.7266,
                 0.7359, 0.7368, 0.7337, 0.7317, 0.7387, 0.7467, 0.7461, 0.7366, 0.7319, 0.7361,
                 0.7437, 0.7432, 0.7461, 0.7461, 0.7454, 0.7549, 0.7742, 0.7801, 0.7903, 0.7876,
                 0.7928, 0.7991, 0.8007, 0.7823, 0.7661, 0.785, 0.7863, 0.7862, 0.7821, 0.7858,
                 0.7731, 0.7779, 0.7844, 0.7866, 0.7864, 0.7788, 0.7875, 0.7971, 0.8004, 0.7857,
                 0.7932, 0.7938, 0.7927, 0.7918, 0.7919, 0.7989, 0.7988, 0.7949, 0.7948, 0.7882,
                 0.7745, 0.771, 0.775, 0.7791, 0.7882, 0.7882, 0.7899, 0.7905, 0.7889, 0.7879,
                 0.7855, 0.7866, 0.7865, 0.7795, 0.7758, 0.7717, 0.761, 0.7497, 0.7471, 0.7473,
                 0.7407, 0.7288, 0.7074, 0.6927, 0.7083, 0.7191, 0.719, 0.7153, 0.7156, 0.7158,
                 0.714, 0.7119, 0.7129, 0.7129, 0.7049, 0.7095
             ]
         }]
     });

     $("#responsetimeStatic").highcharts({
          chart: {
              zoomType: 'x'
          },
          title: {
              text: '每分钟RT时间'
          },
          xAxis: {
              type: 'datetime',
              minRange: 14 * 24 * 3600000 // fourteen days
          },
          yAxis: {
              title: {
                  text: 'call count'
              }
          },
          legend: {
              enabled: false
          },
          plotOptions: {
              area: {
                  fillColor: {
                      linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
                      stops: [
                          [0, Highcharts.getOptions().colors[0]],
                          [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                      ]
                  },
                  marker: {
                      radius: 2
                  },
                  lineWidth: 1,
                  states: {
                      hover: {
                          lineWidth: 1
                      }
                  },
                  threshold: null
              }
          },

          series: [{
              type: 'area',
              name: 'call count',
              pointInterval: 1 * 3600 * 1000,
              pointStart: Date.UTC(2006, 0, 1),
              data: [
                  0.8446, 0.8445, 0.8444, 0.8451,    0.8418, 0.8264,    0.8258, 0.8232,    0.8233, 0.8258,
                  0.8283, 0.8278, 0.8256, 0.8292,    0.8239, 0.8239,    0.8245, 0.8265,    0.8261, 0.8269,
                  0.8273, 0.8244, 0.8244, 0.8172,    0.8139, 0.8146,    0.8164, 0.82,    0.8269, 0.8269,
                  0.8269, 0.8258, 0.8247, 0.8286,    0.8289, 0.8316,    0.832, 0.8333,    0.8352, 0.8357,
                  0.8355, 0.8354, 0.8403, 0.8403,    0.8406, 0.8403,    0.8396, 0.8418,    0.8409, 0.8384,
                  0.8386, 0.8372, 0.839, 0.84, 0.8389, 0.84, 0.8423, 0.8423, 0.8435, 0.8422,
                  0.838, 0.8373, 0.8316, 0.8303,    0.8303, 0.8302,    0.8369, 0.84, 0.8385, 0.84,
                  0.8401, 0.8402, 0.8381, 0.8351,    0.8314, 0.8273,    0.8213, 0.8207,    0.8207, 0.8215,
                  0.8242, 0.8273, 0.8301, 0.8346,    0.8312, 0.8312,    0.8312, 0.8306,    0.8327, 0.8282,
                  0.824, 0.8255, 0.8256, 0.8273, 0.8209, 0.8151, 0.8149, 0.8213, 0.8273, 0.8273,
                  0.8261, 0.8252, 0.824, 0.8262, 0.8258, 0.8261, 0.826, 0.8199, 0.8153, 0.8097,
                  0.8101, 0.8119, 0.8107, 0.8105,    0.8084, 0.8069,    0.8047, 0.8023,    0.7965, 0.7919,
                  0.7921, 0.7922, 0.7934, 0.7918,    0.7915, 0.787, 0.7861, 0.7861, 0.7853, 0.7867,
                  0.7827, 0.7834, 0.7766, 0.7751, 0.7739, 0.7767, 0.7802, 0.7788, 0.7828, 0.7816,
                  0.7829, 0.783, 0.7829, 0.7781, 0.7811, 0.7831, 0.7826, 0.7855, 0.7855, 0.7845,
                  0.7798, 0.7777, 0.7822, 0.7785, 0.7744, 0.7743, 0.7726, 0.7766, 0.7806, 0.785,
                  0.7907, 0.7912, 0.7913, 0.7931, 0.7952, 0.7951, 0.7928, 0.791, 0.7913, 0.7912,
                  0.7941, 0.7953, 0.7921, 0.7919, 0.7968, 0.7999, 0.7999, 0.7974, 0.7942, 0.796,
                  0.7969, 0.7862, 0.7821, 0.7821, 0.7821, 0.7811, 0.7833, 0.7849, 0.7819, 0.7809,
                  0.7809, 0.7827, 0.7848, 0.785, 0.7873, 0.7894, 0.7907, 0.7909, 0.7947, 0.7987,
                  0.799, 0.7927, 0.79, 0.7878, 0.7878, 0.7907, 0.7922, 0.7937, 0.786, 0.787,
                  0.7838, 0.7838, 0.7837, 0.7836, 0.7806, 0.7825, 0.7798, 0.777, 0.777, 0.7772,
                  0.7793, 0.7788, 0.7785, 0.7832, 0.7865, 0.7865, 0.7853, 0.7847, 0.7809, 0.778,
                  0.7799, 0.78, 0.7801, 0.7765, 0.7785, 0.7811, 0.782, 0.7835, 0.7845, 0.7844,
                  0.782, 0.7811, 0.7795, 0.7794, 0.7806, 0.7794, 0.7794, 0.7778, 0.7793, 0.7808,
                  0.7824, 0.787, 0.7894, 0.7893, 0.7882, 0.7871, 0.7882, 0.7871, 0.7878, 0.79,
                  0.7901, 0.7898, 0.7879, 0.7886, 0.7858, 0.7814, 0.7825, 0.7826, 0.7826, 0.786,
                  0.7878, 0.7868, 0.7883, 0.7893, 0.7892, 0.7876, 0.785, 0.787, 0.7873, 0.7901,
                  0.7936, 0.7939, 0.7938, 0.7956, 0.7975, 0.7978, 0.7972, 0.7995, 0.7995, 0.7994,
                  0.7976, 0.7977, 0.796, 0.7922, 0.7928, 0.7929, 0.7948, 0.797, 0.7953, 0.7907,
                  0.7872, 0.7852, 0.7852, 0.786, 0.7862, 0.7836, 0.7837, 0.784, 0.7867, 0.7867,
                  0.7869, 0.7837, 0.7827, 0.7825, 0.7779, 0.7791, 0.779, 0.7787, 0.78, 0.7807,
                  0.7803, 0.7817, 0.7799, 0.7799, 0.7795, 0.7801, 0.7765, 0.7725, 0.7683, 0.7641,
                  0.7639, 0.7616, 0.7608, 0.759, 0.7582, 0.7539, 0.75, 0.75, 0.7507, 0.7505,
                  0.7516, 0.7522, 0.7531, 0.7577, 0.7577, 0.7582, 0.755, 0.7542, 0.7576, 0.7616,
                  0.7648, 0.7648, 0.7641, 0.7614, 0.757, 0.7587, 0.7588, 0.762, 0.762, 0.7617,
                  0.7618, 0.7615, 0.7612, 0.7596, 0.758, 0.758, 0.758, 0.7547, 0.7549, 0.7613,
                  0.7655, 0.7693, 0.7694, 0.7688, 0.7678, 0.7708, 0.7727, 0.7749, 0.7741, 0.7741,
                  0.7732, 0.7727, 0.7737, 0.7724, 0.7712, 0.772, 0.7721, 0.7717, 0.7704, 0.769,
                  0.7711, 0.774, 0.7745, 0.7745, 0.774, 0.7716, 0.7713, 0.7678, 0.7688, 0.7718,
                  0.7718, 0.7728, 0.7729, 0.7698, 0.7685, 0.7681, 0.769, 0.769, 0.7698, 0.7699,
                  0.7651, 0.7613, 0.7616, 0.7614, 0.7614, 0.7607, 0.7602, 0.7611, 0.7622, 0.7615,
                  0.7598, 0.7598, 0.7592, 0.7573, 0.7566, 0.7567, 0.7591, 0.7582, 0.7585, 0.7613,
                  0.7631, 0.7615, 0.76, 0.7613, 0.7627, 0.7627, 0.7608, 0.7583, 0.7575, 0.7562,
                  0.752, 0.7512, 0.7512, 0.7517, 0.752, 0.7511, 0.748, 0.7509, 0.7531, 0.7531,
                  0.7527, 0.7498, 0.7493, 0.7504, 0.75, 0.7491, 0.7491, 0.7485, 0.7484, 0.7492,
                  0.7471, 0.7459, 0.7477, 0.7477, 0.7483, 0.7458, 0.7448, 0.743, 0.7399, 0.7395,
                  0.7395, 0.7378, 0.7382, 0.7362, 0.7355, 0.7348, 0.7361, 0.7361, 0.7365, 0.7362,
                  0.7331, 0.7339, 0.7344, 0.7327, 0.7327, 0.7336, 0.7333, 0.7359, 0.7359, 0.7372,
                  0.736, 0.736, 0.735, 0.7365, 0.7384, 0.7395, 0.7413, 0.7397, 0.7396, 0.7385,
                  0.7378, 0.7366, 0.74, 0.7411, 0.7406, 0.7405, 0.7414, 0.7431, 0.7431, 0.7438,
                  0.7443, 0.7443, 0.7443, 0.7434, 0.7429, 0.7442, 0.744, 0.7439, 0.7437, 0.7437,
                  0.7429, 0.7403, 0.7399, 0.7418, 0.7468, 0.748, 0.748, 0.749, 0.7494, 0.7522,
                  0.7515, 0.7502, 0.7472, 0.7472, 0.7462, 0.7455, 0.7449, 0.7467, 0.7458, 0.7427,
                  0.7427, 0.743, 0.7429, 0.744, 0.743, 0.7422, 0.7388, 0.7388, 0.7369, 0.7345,
                  0.7345, 0.7345, 0.7352, 0.7341, 0.7341, 0.734, 0.7324, 0.7272, 0.7264, 0.7255,
                  0.7258, 0.7258, 0.7256, 0.7257, 0.7247, 0.7243, 0.7244, 0.7235, 0.7235, 0.7235,
                  0.7235, 0.7262, 0.7288, 0.7301, 0.7337, 0.7337, 0.7324, 0.7297, 0.7317, 0.7315,
                  0.7288, 0.7263, 0.7263, 0.7242, 0.7253, 0.7264, 0.727, 0.7312, 0.7305, 0.7305,
                  0.7318, 0.7358, 0.7409, 0.7454, 0.7437, 0.7424, 0.7424, 0.7415, 0.7419, 0.7414,
                  0.7377, 0.7355, 0.7315, 0.7315, 0.732, 0.7332, 0.7346, 0.7328, 0.7323, 0.734,
                  0.734, 0.7336, 0.7351, 0.7346, 0.7321, 0.7294, 0.7266, 0.7266, 0.7254, 0.7242,
                  0.7213, 0.7197, 0.7209, 0.721, 0.721, 0.721, 0.7209, 0.7159, 0.7133, 0.7105,
                  0.7099, 0.7099, 0.7093, 0.7093, 0.7076, 0.707, 0.7049, 0.7012, 0.7011, 0.7019,
                  0.7046, 0.7063, 0.7089, 0.7077, 0.7077, 0.7077, 0.7091, 0.7118, 0.7079, 0.7053,
                  0.705, 0.7055, 0.7055, 0.7045, 0.7051, 0.7051, 0.7017, 0.7, 0.6995, 0.6994,
                  0.7014, 0.7036, 0.7021, 0.7002, 0.6967, 0.695, 0.695, 0.6939, 0.694, 0.6922,
                  0.6919, 0.6914, 0.6894, 0.6891, 0.6904, 0.689, 0.6834, 0.6823, 0.6807, 0.6815,
                  0.6815, 0.6847, 0.6859, 0.6822, 0.6827, 0.6837, 0.6823, 0.6822, 0.6822, 0.6792,
                  0.6746, 0.6735, 0.6731, 0.6742, 0.6744, 0.6739, 0.6731, 0.6761, 0.6761, 0.6785,
                  0.6818, 0.6836, 0.6823, 0.6805, 0.6793, 0.6849, 0.6833, 0.6825, 0.6825, 0.6816,
                  0.6799, 0.6813, 0.6809, 0.6868, 0.6933, 0.6933, 0.6945, 0.6944, 0.6946, 0.6964,
                  0.6965, 0.6956, 0.6956, 0.695, 0.6948, 0.6928, 0.6887, 0.6824, 0.6794, 0.6794,
                  0.6803, 0.6855, 0.6824, 0.6791, 0.6783, 0.6785, 0.6785, 0.6797, 0.68, 0.6803,
                  0.6805, 0.676, 0.677, 0.677, 0.6736, 0.6726, 0.6764, 0.6821, 0.6831, 0.6842,
                  0.6842, 0.6887, 0.6903, 0.6848, 0.6824, 0.6788, 0.6814, 0.6814, 0.6797, 0.6769,
                  0.6765, 0.6733, 0.6729, 0.6758, 0.6758, 0.675, 0.678, 0.6833, 0.6856, 0.6903,
                  0.6896, 0.6896, 0.6882, 0.6879, 0.6862, 0.6852, 0.6823, 0.6813, 0.6813, 0.6822,
                  0.6802, 0.6802, 0.6784, 0.6748, 0.6747, 0.6747, 0.6748, 0.6733, 0.665, 0.6611,
                  0.6583, 0.659, 0.659, 0.6581, 0.6578, 0.6574, 0.6532, 0.6502, 0.6514, 0.6514,
                  0.6507, 0.651, 0.6489, 0.6424, 0.6406, 0.6382, 0.6382, 0.6341, 0.6344, 0.6378,
                  0.6439, 0.6478, 0.6481, 0.6481, 0.6494, 0.6438, 0.6377, 0.6329, 0.6336, 0.6333,
                  0.6333, 0.633, 0.6371, 0.6403, 0.6396, 0.6364, 0.6356, 0.6356, 0.6368, 0.6357,
                  0.6354, 0.632, 0.6332, 0.6328, 0.6331, 0.6342, 0.6321, 0.6302, 0.6278, 0.6308,
                  0.6324, 0.6324, 0.6307, 0.6277, 0.6269, 0.6335, 0.6392, 0.64, 0.6401, 0.6396,
                  0.6407, 0.6423, 0.6429, 0.6472, 0.6485, 0.6486, 0.6467, 0.6444, 0.6467, 0.6509,
                  0.6478, 0.6461, 0.6461, 0.6468, 0.6449, 0.647, 0.6461, 0.6452, 0.6422, 0.6422,
                  0.6425, 0.6414, 0.6366, 0.6346, 0.635, 0.6346, 0.6346, 0.6343, 0.6346, 0.6379,
                  0.6416, 0.6442, 0.6431, 0.6431, 0.6435, 0.644, 0.6473, 0.6469, 0.6386, 0.6356,
                  0.634, 0.6346, 0.643, 0.6452, 0.6467, 0.6506, 0.6504, 0.6503, 0.6481, 0.6451,
                  0.645, 0.6441, 0.6414, 0.6409, 0.6409, 0.6428, 0.6431, 0.6418, 0.6371, 0.6349,
                  0.6333, 0.6334, 0.6338, 0.6342, 0.632, 0.6318, 0.637, 0.6368, 0.6368, 0.6383,
                  0.6371, 0.6371, 0.6355, 0.632, 0.6277, 0.6276, 0.6291, 0.6274, 0.6293, 0.6311,
                  0.631, 0.6312, 0.6312, 0.6304, 0.6294, 0.6348, 0.6378, 0.6368, 0.6368, 0.6368,
                  0.636, 0.637, 0.6418, 0.6411, 0.6435, 0.6427, 0.6427, 0.6419, 0.6446, 0.6468,
                  0.6487, 0.6594, 0.6666, 0.6666, 0.6678, 0.6712, 0.6705, 0.6718, 0.6784, 0.6811,
                  0.6811, 0.6794, 0.6804, 0.6781, 0.6756, 0.6735, 0.6763, 0.6762, 0.6777, 0.6815,
                  0.6802, 0.678, 0.6796, 0.6817, 0.6817, 0.6832, 0.6877, 0.6912, 0.6914, 0.7009,
                  0.7012, 0.701, 0.7005, 0.7076, 0.7087, 0.717, 0.7105, 0.7031, 0.7029, 0.7006,
                  0.7035, 0.7045, 0.6956, 0.6988, 0.6915, 0.6914, 0.6859, 0.6778, 0.6815, 0.6815,
                  0.6843, 0.6846, 0.6846, 0.6923, 0.6997, 0.7098, 0.7188, 0.7232, 0.7262, 0.7266,
                  0.7359, 0.7368, 0.7337, 0.7317, 0.7387, 0.7467, 0.7461, 0.7366, 0.7319, 0.7361,
                  0.7437, 0.7432, 0.7461, 0.7461, 0.7454, 0.7549, 0.7742, 0.7801, 0.7903, 0.7876,
                  0.7928, 0.7991, 0.8007, 0.7823, 0.7661, 0.785, 0.7863, 0.7862, 0.7821, 0.7858,
                  0.7731, 0.7779, 0.7844, 0.7866, 0.7864, 0.7788, 0.7875, 0.7971, 0.8004, 0.7857,
                  0.7932, 0.7938, 0.7927, 0.7918, 0.7919, 0.7989, 0.7988, 0.7949, 0.7948, 0.7882,
                  0.7745, 0.771, 0.775, 0.7791, 0.7882, 0.7882, 0.7899, 0.7905, 0.7889, 0.7879,
                  0.7855, 0.7866, 0.7865, 0.7795, 0.7758, 0.7717, 0.761, 0.7497, 0.7471, 0.7473,
                  0.7407, 0.7288, 0.7074, 0.6927, 0.7083, 0.7191, 0.719, 0.7153, 0.7156, 0.7158,
                  0.714, 0.7119, 0.7129, 0.7129, 0.7049, 0.7095
              ]
          }]
      });

      $("#failcountStatic").highcharts({
           chart: {
               zoomType: 'x'
           },
           title: {
               text: '每分钟次数错误'
           },
           xAxis: {
               type: 'datetime',
               minRange: 14 * 24 * 3600000 // fourteen days
           },
           yAxis: {
               title: {
                   text: 'call count'
               }
           },
           legend: {
               enabled: false
           },
           plotOptions: {
               area: {
                   fillColor: {
                       linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
                       stops: [
                           [0, Highcharts.getOptions().colors[0]],
                           [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                       ]
                   },
                   marker: {
                       radius: 2
                   },
                   lineWidth: 1,
                   states: {
                       hover: {
                           lineWidth: 1
                       }
                   },
                   threshold: null
               }
           },

           series: [{
               type: 'area',
               name: 'call count',
               pointInterval: 1 * 3600 * 1000,
               pointStart: Date.UTC(2006, 0, 1),
               data: [
                   0.8446, 0.8445, 0.8444, 0.8451,    0.8418, 0.8264,    0.8258, 0.8232,    0.8233, 0.8258,
                   0.8283, 0.8278, 0.8256, 0.8292,    0.8239, 0.8239,    0.8245, 0.8265,    0.8261, 0.8269,
                   0.8273, 0.8244, 0.8244, 0.8172,    0.8139, 0.8146,    0.8164, 0.82,    0.8269, 0.8269,
                   0.8269, 0.8258, 0.8247, 0.8286,    0.8289, 0.8316,    0.832, 0.8333,    0.8352, 0.8357,
                   0.8355, 0.8354, 0.8403, 0.8403,    0.8406, 0.8403,    0.8396, 0.8418,    0.8409, 0.8384,
                   0.8386, 0.8372, 0.839, 0.84, 0.8389, 0.84, 0.8423, 0.8423, 0.8435, 0.8422,
                   0.838, 0.8373, 0.8316, 0.8303,    0.8303, 0.8302,    0.8369, 0.84, 0.8385, 0.84,
                   0.8401, 0.8402, 0.8381, 0.8351,    0.8314, 0.8273,    0.8213, 0.8207,    0.8207, 0.8215,
                   0.8242, 0.8273, 0.8301, 0.8346,    0.8312, 0.8312,    0.8312, 0.8306,    0.8327, 0.8282,
                   0.824, 0.8255, 0.8256, 0.8273, 0.8209, 0.8151, 0.8149, 0.8213, 0.8273, 0.8273,
                   0.8261, 0.8252, 0.824, 0.8262, 0.8258, 0.8261, 0.826, 0.8199, 0.8153, 0.8097,
                   0.8101, 0.8119, 0.8107, 0.8105,    0.8084, 0.8069,    0.8047, 0.8023,    0.7965, 0.7919,
                   0.7921, 0.7922, 0.7934, 0.7918,    0.7915, 0.787, 0.7861, 0.7861, 0.7853, 0.7867,
                   0.7827, 0.7834, 0.7766, 0.7751, 0.7739, 0.7767, 0.7802, 0.7788, 0.7828, 0.7816,
                   0.7829, 0.783, 0.7829, 0.7781, 0.7811, 0.7831, 0.7826, 0.7855, 0.7855, 0.7845,
                   0.7798, 0.7777, 0.7822, 0.7785, 0.7744, 0.7743, 0.7726, 0.7766, 0.7806, 0.785,
                   0.7907, 0.7912, 0.7913, 0.7931, 0.7952, 0.7951, 0.7928, 0.791, 0.7913, 0.7912,
                   0.7941, 0.7953, 0.7921, 0.7919, 0.7968, 0.7999, 0.7999, 0.7974, 0.7942, 0.796,
                   0.7969, 0.7862, 0.7821, 0.7821, 0.7821, 0.7811, 0.7833, 0.7849, 0.7819, 0.7809,
                   0.7809, 0.7827, 0.7848, 0.785, 0.7873, 0.7894, 0.7907, 0.7909, 0.7947, 0.7987,
                   0.799, 0.7927, 0.79, 0.7878, 0.7878, 0.7907, 0.7922, 0.7937, 0.786, 0.787,
                   0.7838, 0.7838, 0.7837, 0.7836, 0.7806, 0.7825, 0.7798, 0.777, 0.777, 0.7772,
                   0.7793, 0.7788, 0.7785, 0.7832, 0.7865, 0.7865, 0.7853, 0.7847, 0.7809, 0.778,
                   0.7799, 0.78, 0.7801, 0.7765, 0.7785, 0.7811, 0.782, 0.7835, 0.7845, 0.7844,
                   0.782, 0.7811, 0.7795, 0.7794, 0.7806, 0.7794, 0.7794, 0.7778, 0.7793, 0.7808,
                   0.7824, 0.787, 0.7894, 0.7893, 0.7882, 0.7871, 0.7882, 0.7871, 0.7878, 0.79,
                   0.7901, 0.7898, 0.7879, 0.7886, 0.7858, 0.7814, 0.7825, 0.7826, 0.7826, 0.786,
                   0.7878, 0.7868, 0.7883, 0.7893, 0.7892, 0.7876, 0.785, 0.787, 0.7873, 0.7901,
                   0.7936, 0.7939, 0.7938, 0.7956, 0.7975, 0.7978, 0.7972, 0.7995, 0.7995, 0.7994,
                   0.7976, 0.7977, 0.796, 0.7922, 0.7928, 0.7929, 0.7948, 0.797, 0.7953, 0.7907,
                   0.7872, 0.7852, 0.7852, 0.786, 0.7862, 0.7836, 0.7837, 0.784, 0.7867, 0.7867,
                   0.7869, 0.7837, 0.7827, 0.7825, 0.7779, 0.7791, 0.779, 0.7787, 0.78, 0.7807,
                   0.7803, 0.7817, 0.7799, 0.7799, 0.7795, 0.7801, 0.7765, 0.7725, 0.7683, 0.7641,
                   0.7639, 0.7616, 0.7608, 0.759, 0.7582, 0.7539, 0.75, 0.75, 0.7507, 0.7505,
                   0.7516, 0.7522, 0.7531, 0.7577, 0.7577, 0.7582, 0.755, 0.7542, 0.7576, 0.7616,
                   0.7648, 0.7648, 0.7641, 0.7614, 0.757, 0.7587, 0.7588, 0.762, 0.762, 0.7617,
                   0.7618, 0.7615, 0.7612, 0.7596, 0.758, 0.758, 0.758, 0.7547, 0.7549, 0.7613,
                   0.7655, 0.7693, 0.7694, 0.7688, 0.7678, 0.7708, 0.7727, 0.7749, 0.7741, 0.7741,
                   0.7732, 0.7727, 0.7737, 0.7724, 0.7712, 0.772, 0.7721, 0.7717, 0.7704, 0.769,
                   0.7711, 0.774, 0.7745, 0.7745, 0.774, 0.7716, 0.7713, 0.7678, 0.7688, 0.7718,
                   0.7718, 0.7728, 0.7729, 0.7698, 0.7685, 0.7681, 0.769, 0.769, 0.7698, 0.7699,
                   0.7651, 0.7613, 0.7616, 0.7614, 0.7614, 0.7607, 0.7602, 0.7611, 0.7622, 0.7615,
                   0.7598, 0.7598, 0.7592, 0.7573, 0.7566, 0.7567, 0.7591, 0.7582, 0.7585, 0.7613,
                   0.7631, 0.7615, 0.76, 0.7613, 0.7627, 0.7627, 0.7608, 0.7583, 0.7575, 0.7562,
                   0.752, 0.7512, 0.7512, 0.7517, 0.752, 0.7511, 0.748, 0.7509, 0.7531, 0.7531,
                   0.7527, 0.7498, 0.7493, 0.7504, 0.75, 0.7491, 0.7491, 0.7485, 0.7484, 0.7492,
                   0.7471, 0.7459, 0.7477, 0.7477, 0.7483, 0.7458, 0.7448, 0.743, 0.7399, 0.7395,
                   0.7395, 0.7378, 0.7382, 0.7362, 0.7355, 0.7348, 0.7361, 0.7361, 0.7365, 0.7362,
                   0.7331, 0.7339, 0.7344, 0.7327, 0.7327, 0.7336, 0.7333, 0.7359, 0.7359, 0.7372,
                   0.736, 0.736, 0.735, 0.7365, 0.7384, 0.7395, 0.7413, 0.7397, 0.7396, 0.7385,
                   0.7378, 0.7366, 0.74, 0.7411, 0.7406, 0.7405, 0.7414, 0.7431, 0.7431, 0.7438,
                   0.7443, 0.7443, 0.7443, 0.7434, 0.7429, 0.7442, 0.744, 0.7439, 0.7437, 0.7437,
                   0.7429, 0.7403, 0.7399, 0.7418, 0.7468, 0.748, 0.748, 0.749, 0.7494, 0.7522,
                   0.7515, 0.7502, 0.7472, 0.7472, 0.7462, 0.7455, 0.7449, 0.7467, 0.7458, 0.7427,
                   0.7427, 0.743, 0.7429, 0.744, 0.743, 0.7422, 0.7388, 0.7388, 0.7369, 0.7345,
                   0.7345, 0.7345, 0.7352, 0.7341, 0.7341, 0.734, 0.7324, 0.7272, 0.7264, 0.7255,
                   0.7258, 0.7258, 0.7256, 0.7257, 0.7247, 0.7243, 0.7244, 0.7235, 0.7235, 0.7235,
                   0.7235, 0.7262, 0.7288, 0.7301, 0.7337, 0.7337, 0.7324, 0.7297, 0.7317, 0.7315,
                   0.7288, 0.7263, 0.7263, 0.7242, 0.7253, 0.7264, 0.727, 0.7312, 0.7305, 0.7305,
                   0.7318, 0.7358, 0.7409, 0.7454, 0.7437, 0.7424, 0.7424, 0.7415, 0.7419, 0.7414,
                   0.7377, 0.7355, 0.7315, 0.7315, 0.732, 0.7332, 0.7346, 0.7328, 0.7323, 0.734,
                   0.734, 0.7336, 0.7351, 0.7346, 0.7321, 0.7294, 0.7266, 0.7266, 0.7254, 0.7242,
                   0.7213, 0.7197, 0.7209, 0.721, 0.721, 0.721, 0.7209, 0.7159, 0.7133, 0.7105,
                   0.7099, 0.7099, 0.7093, 0.7093, 0.7076, 0.707, 0.7049, 0.7012, 0.7011, 0.7019,
                   0.7046, 0.7063, 0.7089, 0.7077, 0.7077, 0.7077, 0.7091, 0.7118, 0.7079, 0.7053,
                   0.705, 0.7055, 0.7055, 0.7045, 0.7051, 0.7051, 0.7017, 0.7, 0.6995, 0.6994,
                   0.7014, 0.7036, 0.7021, 0.7002, 0.6967, 0.695, 0.695, 0.6939, 0.694, 0.6922,
                   0.6919, 0.6914, 0.6894, 0.6891, 0.6904, 0.689, 0.6834, 0.6823, 0.6807, 0.6815,
                   0.6815, 0.6847, 0.6859, 0.6822, 0.6827, 0.6837, 0.6823, 0.6822, 0.6822, 0.6792,
                   0.6746, 0.6735, 0.6731, 0.6742, 0.6744, 0.6739, 0.6731, 0.6761, 0.6761, 0.6785,
                   0.6818, 0.6836, 0.6823, 0.6805, 0.6793, 0.6849, 0.6833, 0.6825, 0.6825, 0.6816,
                   0.6799, 0.6813, 0.6809, 0.6868, 0.6933, 0.6933, 0.6945, 0.6944, 0.6946, 0.6964,
                   0.6965, 0.6956, 0.6956, 0.695, 0.6948, 0.6928, 0.6887, 0.6824, 0.6794, 0.6794,
                   0.6803, 0.6855, 0.6824, 0.6791, 0.6783, 0.6785, 0.6785, 0.6797, 0.68, 0.6803,
                   0.6805, 0.676, 0.677, 0.677, 0.6736, 0.6726, 0.6764, 0.6821, 0.6831, 0.6842,
                   0.6842, 0.6887, 0.6903, 0.6848, 0.6824, 0.6788, 0.6814, 0.6814, 0.6797, 0.6769,
                   0.6765, 0.6733, 0.6729, 0.6758, 0.6758, 0.675, 0.678, 0.6833, 0.6856, 0.6903,
                   0.6896, 0.6896, 0.6882, 0.6879, 0.6862, 0.6852, 0.6823, 0.6813, 0.6813, 0.6822,
                   0.6802, 0.6802, 0.6784, 0.6748, 0.6747, 0.6747, 0.6748, 0.6733, 0.665, 0.6611,
                   0.6583, 0.659, 0.659, 0.6581, 0.6578, 0.6574, 0.6532, 0.6502, 0.6514, 0.6514,
                   0.6507, 0.651, 0.6489, 0.6424, 0.6406, 0.6382, 0.6382, 0.6341, 0.6344, 0.6378,
                   0.6439, 0.6478, 0.6481, 0.6481, 0.6494, 0.6438, 0.6377, 0.6329, 0.6336, 0.6333,
                   0.6333, 0.633, 0.6371, 0.6403, 0.6396, 0.6364, 0.6356, 0.6356, 0.6368, 0.6357,
                   0.6354, 0.632, 0.6332, 0.6328, 0.6331, 0.6342, 0.6321, 0.6302, 0.6278, 0.6308,
                   0.6324, 0.6324, 0.6307, 0.6277, 0.6269, 0.6335, 0.6392, 0.64, 0.6401, 0.6396,
                   0.6407, 0.6423, 0.6429, 0.6472, 0.6485, 0.6486, 0.6467, 0.6444, 0.6467, 0.6509,
                   0.6478, 0.6461, 0.6461, 0.6468, 0.6449, 0.647, 0.6461, 0.6452, 0.6422, 0.6422,
                   0.6425, 0.6414, 0.6366, 0.6346, 0.635, 0.6346, 0.6346, 0.6343, 0.6346, 0.6379,
                   0.6416, 0.6442, 0.6431, 0.6431, 0.6435, 0.644, 0.6473, 0.6469, 0.6386, 0.6356,
                   0.634, 0.6346, 0.643, 0.6452, 0.6467, 0.6506, 0.6504, 0.6503, 0.6481, 0.6451,
                   0.645, 0.6441, 0.6414, 0.6409, 0.6409, 0.6428, 0.6431, 0.6418, 0.6371, 0.6349,
                   0.6333, 0.6334, 0.6338, 0.6342, 0.632, 0.6318, 0.637, 0.6368, 0.6368, 0.6383,
                   0.6371, 0.6371, 0.6355, 0.632, 0.6277, 0.6276, 0.6291, 0.6274, 0.6293, 0.6311,
                   0.631, 0.6312, 0.6312, 0.6304, 0.6294, 0.6348, 0.6378, 0.6368, 0.6368, 0.6368,
                   0.636, 0.637, 0.6418, 0.6411, 0.6435, 0.6427, 0.6427, 0.6419, 0.6446, 0.6468,
                   0.6487, 0.6594, 0.6666, 0.6666, 0.6678, 0.6712, 0.6705, 0.6718, 0.6784, 0.6811,
                   0.6811, 0.6794, 0.6804, 0.6781, 0.6756, 0.6735, 0.6763, 0.6762, 0.6777, 0.6815,
                   0.6802, 0.678, 0.6796, 0.6817, 0.6817, 0.6832, 0.6877, 0.6912, 0.6914, 0.7009,
                   0.7012, 0.701, 0.7005, 0.7076, 0.7087, 0.717, 0.7105, 0.7031, 0.7029, 0.7006,
                   0.7035, 0.7045, 0.6956, 0.6988, 0.6915, 0.6914, 0.6859, 0.6778, 0.6815, 0.6815,
                   0.6843, 0.6846, 0.6846, 0.6923, 0.6997, 0.7098, 0.7188, 0.7232, 0.7262, 0.7266,
                   0.7359, 0.7368, 0.7337, 0.7317, 0.7387, 0.7467, 0.7461, 0.7366, 0.7319, 0.7361,
                   0.7437, 0.7432, 0.7461, 0.7461, 0.7454, 0.7549, 0.7742, 0.7801, 0.7903, 0.7876,
                   0.7928, 0.7991, 0.8007, 0.7823, 0.7661, 0.785, 0.7863, 0.7862, 0.7821, 0.7858,
                   0.7731, 0.7779, 0.7844, 0.7866, 0.7864, 0.7788, 0.7875, 0.7971, 0.8004, 0.7857,
                   0.7932, 0.7938, 0.7927, 0.7918, 0.7919, 0.7989, 0.7988, 0.7949, 0.7948, 0.7882,
                   0.7745, 0.771, 0.775, 0.7791, 0.7882, 0.7882, 0.7899, 0.7905, 0.7889, 0.7879,
                   0.7855, 0.7866, 0.7865, 0.7795, 0.7758, 0.7717, 0.761, 0.7497, 0.7471, 0.7473,
                   0.7407, 0.7288, 0.7074, 0.6927, 0.7083, 0.7191, 0.719, 0.7153, 0.7156, 0.7158,
                   0.714, 0.7119, 0.7129, 0.7129, 0.7049, 0.7095
               ]
           }]
       });

    // 给标题绑定事件
    $(".titles").on("click", function(){
        var current = $(this).parent().parent().children();
        console.log("current:" + current.length);
        for (var i=0; i< current.length; i++) { //遍历导航条删除active属性
            var element = $(current[i]).removeClass("active");
            console.log("element " + element);
        }
        $(this).parent().addClass("active"); // 激活当前选中标题
        var content = $(this).html();
        console.log("content: " + content);
        if("JAVA" == content) { //java相关配置
            console.log("1");
            $("#JAVA").css("display", "block");
            $("#Config").css("display", "none");
            $(".Monitor").css("display", "none");
        } else if("PHP" == content) { //PHP相关配置
            console.log("2");
            $("#JAVA").css("display", "none");
            $("#Config").css("display", "none");
            $(".Monitor").css("display", "none");
        } else if("Config" == content) { //配置页面
            console.log("3");
            $("#JAVA").css("display", "none");
            $("#Config").css("display", "block");
            $(".Monitor").css("display", "none");

        } else if("Monitor" == content) { // 监控页面
            console.log("4");
            $("#JAVA").css("display", "none");
            $("#Config").css("display", "none");
            $(".Monitor").css("display", "block");
        }


    });

    // 给config页面查询按钮绑定时间
    $("#configQuery").on("click", function(){
        var configMethod = $("#configMethod").val();
        var configUrl = $("#configUrl").val();
        var version = $("#version").val();

        if(configMethod != "" && configUrl != "" && version != "") { //  用户输入完整
            console.log("configMethod: " + configMethod + " configUrl: " + configUrl + " version: " + version);
            // 发送post请求
            $.post("queryConfig.json", {"methodName":configMethod,"url":configUrl,"version":version}, function(d) {
                  console.log("result: " + d);

//                var object = new Object();
//                 object.log_flag = "";
//                 object.freq_flag = "b";
//                 object.freq_limit = "c";
//                 object.inner_outer_flag = "d";
//                 object.version = "e";
//                 object.service_type = "f";
//                 object.request_type = "g";
                var rowNum = methodTable5.rows.length; // 当前表的行数
                for ( var j=1; j<rowNum; j++) { // 1表示跳过表头
                    methodTable5.deleteRow(1);
                }
                //for(var i=0; i<d.length; i++) { // 把查询的结果插入到页面上的表格中
                if(null != d){
                    addRow5(d);
                } else {
                    console.log("null return");
                }

                //}
                // 插入行之后，给编辑按钮绑定点击事件
                addRowsEdit5();
                //绑定删除事件
                deleteRows();
            },"json");
        } else {
            console.log("something is missing~~");
        }


    });
    //按方法名查找
    $("#queryMethod").on("click",function() {
        var methodName = $("#methodName_1").val();
        var url = $("#urlName").val();
        if("" == methodName || "" == url) { // 输入为空，直接返回
            return;
        }
        // 发送post请求
        $.post("queryMethod.json", {"methodName":methodName,"url":url}, function(d) {
            var rowNum = methodTable.rows.length; // 当前表的行数
            for ( var j=1; j<rowNum; j++) { // 1表示跳过表头
                methodTable.deleteRow(1);
            }
            for(var i=0; i<d.length; i++) { // 把查询的结果插入到页面上的表格中
                addRow(d[i]);
            }
            // 插入行之后，给编辑按钮绑定点击事件
            addRowsEdit();
            //绑定删除事件
            deleteRows();
        },"json");
    });

    // 第二步 按方法名查找
    $("#queryMethod2").on("click", function() {
        var methodName2 = $("#methodName2").val();
        if("" == methodName2) { // 输入为空直接返回
            var rowNum = methodTable2.rows.length; // 当前表的行数
            for ( var j=1; j<rowNum; j++) { // 1表示跳过表头
                methodTable2.deleteRow(1);
            }
            return;
        }
        // 发送post请求
        $.post("queryStructure.json", { "method":methodName2 }, function(d) {
            var rowNum = methodTable2.rows.length; // 当前表的行数
            for ( var j=1; j<rowNum; j++) { // 1表示跳过表头
                methodTable2.deleteRow(1);
            }
            for(var i=0; i<d.length; i++) { // 把查询的结果插入到页面上的表格中
                addRow2(d[i]);
            }
            // 插入行之后，给编辑按钮绑定点击事件
            addRowsEdit2();
            //绑定删除事件
            deleteRows();
        },"json");
    });

    //第三步，按类型查找
    $("#queryType").on("click", function() {
        var methodName3 = $("#methodName3").val();
        if("" == methodName3) { // 输入为空直接返回
            var rowNum = tableType.rows.length; // 当前表的行数
            for ( var j=1; j<rowNum; j++) { // 1表示跳过表头
                tableType.deleteRow(1);
            }
            return;
        }
        // 发送post请求
        $.post("queryType.json", { "type":methodName3 }, function(d) {
            var rowNum = tableType.rows.length; // 当前表的行数
            for ( var j=1; j<rowNum; j++) { // 1表示跳过表头
                tableType.deleteRow(1);
            }
            for(var i=0; i<d.length; i++) { // 把查询的结果插入到页面上的表格中
                addRow3(d[i]);
            }
            // 插入行之后，给编辑按钮绑定点击事件
            addRowsEdit3();
            //绑定删除事件
            deleteRows();
        },"json");
    });

    // 第四步，按方法名查找
    $("#queryMethod4").on("click", function() {
        var methodName4 = $("#methodName4").val();
        if("" == methodName4) { // 输入为空直接返回
            return;
        }
        // 发送post请求
        $.post("queryOuter.json", { "name":methodName4 }, function(d) {
            var rowNum = tableMethod4.rows.length; // 当前表的行数
            for ( var j=1; j<rowNum; j++) { // 1表示跳过表头
                tableMethod4.deleteRow(1);
            }
            for(var i=0; i<d.length; i++) { // 把查询的结果插入到页面上的表格中
                addRow4(d[i]);
            }
            // 插入行之后，给编辑按钮绑定点击事件
            addRowsEdit4();
            //绑定删除事件
            deleteRows();
        },"json");
    });
    // 第一步，更新表数据
    $("#updateMethods").on("click", function() {
        // 如果没有数据显示，跳过更新
        if(2 == methodTable.rows.length) { //只有两行的情况才有可能删除
            var  content = methodTable.rows[1].cells.length;
            if(1 == content) {
                return;
            }
        }

        // 如果只有表头，跳过更新
        if(1 == methodTable.rows.length) {
            return;
        }

        // 扫描table，获取其中的内容
        var rowLen = methodTable.rows.length; // 表行数
        var updateArray = new Array();
        var addArray = new Array();
        for (var i=1; i<rowLen; i++) { // i=1表示跳过表头
            var id = $(methodTable.rows[i]).attr("id");
            var methodName = $("#methodName_1").val();
            var paramname = methodTable.rows[i].cells[0].innerHTML;
            var type = methodTable.rows[i].cells[1].innerHTML;
            var isneed = methodTable.rows[i].cells[2].innerHTML;
            var isStructure = methodTable.rows[i].cells[3].innerHTML;
            var url = $("#urlName").val();
            if("" == url) {
                return;
            }

            var object = new Object();
            object.method = methodName;
            object.paramname = paramname;
            object.paramtype = type;
            object.isneed = isneed;
            object.isStructure = isStructure;
            object.url = url;
            if(typeof(id) == "string") { // 直接DB查询出来的数据 会有id属性
                object.id = id;
                updateArray.push(object);
            } else { // 新增行
                addArray.push(object);
            }
        }
        $(".updatingIcon").css("display", "block");
        $("#updateStatus").html("正在更新")
        $("#myHideModal").modal("show");
        $.post("batchUpdate.json", { "updateArray":JSON.stringify(updateArray), "addArray":JSON.stringify(addArray) }, function(d) {
            var type = typeof(d);
            if("success" == d){
                $("#updateStatus").html("更新成功");
                $(".updatingIcon").css("display", "none");
                $("#queryMethod").click();
            }
            $("#myHideModal").delay(3000);
            $("#myHideModal").modal("hide");
        },"json" );
    });

    // 第二步，更新表数据
    $("#updateMethods2").on("click", function() {
        // 如果没有数据显示，跳过更新
        if(2 == methodTable2.rows.length) { //只有两行的情况才有可能删除
            var  content = methodTable2.rows[1].cells.length;
            if(1 == content) {
                return;
            }
        }

        // 如果只有表头，跳过更新
        if(1 == methodTable2.rows.length) {
            return;
        }

        if("" == $("#methodName2").val()) {
            return;
        }

        // 扫描table，获取其中的内容
        var rowLen = methodTable2.rows.length; // 表行数
        var updateArray = new Array();
        var addArray = new Array();
        for (var i=1; i<rowLen; i++) { // i=1表示跳过表头
            var id = $(methodTable2.rows[i]).attr("id");
            //var method = methodTable2.rows[i].cells[0].innerHTML;
            var method = $("#methodName2").val();
            var paramname = methodTable2.rows[i].cells[0].innerHTML;
            var paramtype = methodTable2.rows[i].cells[1].innerHTML;
            var isStructure = methodTable2.rows[i].cells[2].innerHTML;
            var sequence = methodTable2.rows[i].cells[3].innerHTML;

            var object = new Object();
            object.method = method;
            object.paramname = paramname;
            object.paramtype = paramtype;
            object.isStructure = isStructure;
            object.sequence = sequence;
            if(typeof(id) == "string") { // 直接DB查询出来的数据 会有id属性
                object.id = id;
                updateArray.push(object);
            } else { // 新增行
                addArray.push(object);
            }
        }
        $(".updatingIcon").css("display", "block");
        $("#updateStatus").html("正在更新")
        $("#myHideModal").modal("show");
        $.post("batchUpdateStructure.json", { "updateArray":JSON.stringify(updateArray), "addArray":JSON.stringify(addArray) }, function(d) {
            var type = typeof(d);
            if("success" == d){
                $("#updateStatus").html("更新成功");
                $(".updatingIcon").css("display", "none");
                $("#queryMethod2").click();
            }
            $("#myHideModal").delay(3000);
            $("#myHideModal").modal("hide");
        },"json" );
    });

    // 第三步，更新表数据
    $("#updateType").on("click", function() {
        // 如果没有数据显示，跳过更新
        if(2 == tableType.rows.length) { //只有两行的情况才有可能删除
            var  content = tableType.rows[1].cells.length;
            if(1 == content) {
                return;
            }
        }

        // 如果只有表头，跳过更新
        if(1 == tableType.rows.length) {
            return;
        }

        // 扫描table，获取其中的内容
        var rowLen = tableType.rows.length; // 表行数
        var updateArray = new Array();
        var addArray = new Array();
        for (var i=1; i<rowLen; i++) { // i=1表示跳过表头
            var id = $(tableType.rows[i]).attr("id");
            var parParamtype = tableType.rows[i].cells[0].innerHTML;
            var paramname = tableType.rows[i].cells[1].innerHTML;
            var paramtype = tableType.rows[i].cells[2].innerHTML;
            var isStructure = tableType.rows[i].cells[3].innerHTML;

            var object = new Object();
            object.parParamtype = parParamtype;
            object.paramname = paramname;
            object.paramtype = paramtype;
            object.isStructure = isStructure;
            if(typeof(id) == "string") { // 直接DB查询出来的数据 会有id属性
                object.id = id;
                updateArray.push(object);
            } else { // 新增行
                addArray.push(object);
            }
        }
        $(".updatingIcon").css("display", "block");
        $("#updateStatus").html("正在更新")
        $("#myHideModal").modal("show");
        $.post("batchUpdateType.json", { "updateArray":JSON.stringify(updateArray), "addArray":JSON.stringify(addArray) }, function(d) {
            if("success" == d){
                $("#updateStatus").html("更新成功");
                $(".updatingIcon").css("display", "none");
                $("#queryType").click();
            }
            $("#myHideModal").delay(3000);
            $("#myHideModal").modal("hide");
        } , "json");
    });

    // 第四步,更新表数据
    $("#updateMethods4").on("click", function() {
        // 如果没有数据显示，跳过更新
        if(2 == tableMethod4.rows.length) { //只有两行的情况才有可能删除
            var  content = tableMethod4.rows[1].cells.length;
            if(1 == content) {
                return;
            }
        }

        // 如果只有表头，跳过更新
        if(1 == tableMethod4.rows.length) {
            return;
        }

        var methodName = $("#methodName4").val();
        if("" == methodName) {
            return;
        }


        // 扫描table，获取其中的内容
        var rowLen = tableMethod4.rows.length; // 表行数
        var updateArray = new Array();
        var addArray = new Array();
        for (var i=1; i<rowLen; i++) { // i=1表示跳过表头
            var method = $("#methodName4").val();
            var id = $(tableMethod4.rows[i]).attr("id");
            var outer_param = tableMethod4.rows[i].cells[0].innerHTML;
            var inner_param = tableMethod4.rows[i].cells[1].innerHTML;
            var paramtype4 = tableMethod4.rows[i].cells[2].innerHTML;
            var ref = tableMethod4.rows[i].cells[3].innerHTML;

            var object = new Object();
            object.method = method;
            object.outer_param = outer_param;
            object.inner_param = inner_param;
            object.paramtype4 = paramtype4;
            object.ref = ref;
            if(typeof(id) == "string") { // 直接DB查询出来的数据 会有id属性
                object.id = id;
                updateArray.push(object);
            } else { // 新增行
                addArray.push(object);
            }
        }
        $(".updatingIcon").css("display", "block");
        $("#updateStatus").html("正在更新")
        $("#myHideModal").modal("show");
        $.post("batchUpdateOuter.json", { "updateArray":JSON.stringify(updateArray), "addArray":JSON.stringify(addArray) }, function(d) {

            if("success" == d){
                $("#updateStatus").html("更新成功");
                $(".updatingIcon").css("display", "none");
                $("#queryMethod4").click();
            }
            $("#myHideModal").delay(3000);
            $("#myHideModal").modal("hide");
        } ,"json");
    });

    // 第五步,更新表数据
    $("#updateMethods5").on("click", function() {
        // 如果没有数据显示，跳过更新
        if(2 == methodTable5.rows.length) { //只有两行的情况才有可能删除
            var  content = methodTable5.rows[1].cells.length;
            if(1 == content) {
                return;
            }
        }

        // 如果只有表头，跳过更新
        if(1 == methodTable5.rows.length) {
            return;
        }

        var methodName = $("#configMethod").val();
        var url = $("#configUrl").val();
        var version = $("#version").val();
        if("" == methodName || "" == url || "" == version) {
            return;
        }


        // 扫描table，获取其中的内容
        var rowLen = methodTable5.rows.length; // 表行数
        var updateArray = new Array();
        var addArray = new Array();
        for (var i=1; i<rowLen; i++) { // i=1表示跳过表头
            var method = $("#configMethod").val();
            var id = $(methodTable5.rows[i]).attr("id");
            var logFlag = methodTable5.rows[i].cells[0].innerHTML;
            var freqFlag = methodTable5.rows[i].cells[1].innerHTML;
            var freqLimit = methodTable5.rows[i].cells[2].innerHTML;
            var innerOuterFlag = methodTable5.rows[i].cells[3].innerHTML;
            var serviceType = methodTable5.rows[i].cells[4].innerHTML;

            var object = new Object();
            object.method = method;
            object.url = url;
            object.version = version;
            object.logFlag = logFlag;
            object.freqFlag = freqFlag;
            object.freqLimit = freqLimit;
            object.innerOuterFlag = innerOuterFlag;
            object.serviceType = serviceType;
            if(typeof(id) == "string") { // 直接DB查询出来的数据 会有id属性
                object.id = id;
                updateArray.push(object);
            } else { // 新增行
                addArray.push(object);
            }
        }
        $(".updatingIcon").css("display", "block");
        $("#updateStatus").html("正在更新")
        $("#myHideModal").modal("show");
        $.post("batchUpdateConfig.json", { "updateArray":JSON.stringify(updateArray), "addArray":JSON.stringify(addArray) }, function(d) {

            if("success" == d){
                $("#updateStatus").html("更新成功");
                $(".updatingIcon").css("display", "none");
                $("#configQuery").click();
            }
            $("#myHideModal").delay(3000);
            $("#myHideModal").modal("hide");
        } ,"json");
    });

    // 第一步，给新增行按钮绑定事件
    $(".insertRowMethod1").on("click", function() {
        $("#myModalLabel").html("新增一行");
        document.getElementById("methodForm").reset(); // 重置表单
        $("#saveRow").attr("flag", "0"); // 标记为新增行状态
    });

    // 第二步，给新增行按钮绑定事件
    $(".insertRowMethod2").on("click", function() {
        $("#myModalLabel2").html("新增一行");
        document.getElementById("methodForm2").reset(); // 重置表单
        $("#saveRowStructure").attr("flag", "0"); // 标记为新增行状态
    });

    // 第三步，给新增行按钮绑定事件
    $(".insertRowType").on("click", function() {
        $("#myModalLabel3").html("新增一行");
        document.getElementById("methodForm3").reset(); // 重置表单
        $("#saveRowType").attr("flag", "0"); // 标记为新增行状态
    });

    // 第四步，给新增行按钮绑定事件
    $(".insertRowMethod4").on("click", function() {
        $("#myModalLabel4").html("新增一行");
        document.getElementById("methodForm4").reset(); // 重置表单
        $("#saveRowOuter").attr("flag", "0"); // 标记为新增行状态
    });

    // 第五步，给新增行按钮绑定事件
    $(".insertRowMethod5").on("click", function() {
        $("#myModalLabel5").html("新增一行");
        document.getElementById("methodForm5").reset(); // 重置表单
        $("#saveConfig").attr("flag", "0"); // 标记为新增行状态
    });

    //第一步，编辑或者新增一行
    $("#saveRow").on("click", function() {
        // 删除空数据行
        if(2 == methodTable.rows.length) { //只有两行的情况才有可能删除
            var  content = methodTable.rows[1].cells.length;
            if(1 == content) {
                methodTable.deleteRow(1);
            }
        }

        var flag = $("#methodForm").valid(); // 判断表单是否通过验证
        if(flag) { //true表示通过表单验证
            if("0" == $(this).attr("flag")) { //新增行状态
                //  插入一行到table
                var insertObject = new Object();
                insertObject.method = $("#methodName_1").val();
                insertObject.paramname = $("#methodName1").val();
                insertObject.paramtype = $("#type1").val();
                insertObject.isneed = $("#isneed1").val();
                insertObject.isStructure = $("#isStructure1").val();
                addRow(insertObject);
                // 插入行之后，给编辑按钮绑定点击事件
                addRowsEdit();
                //绑定删除事件
                deleteRows();
            } else { // 编辑行状态
                // 获取当前行
                var clickElement = $("#currentRow").val();
                var tr = document.getElementById(clickElement).parentNode.parentNode.parentNode; //获取当前行DOM
                tr.cells[0].innerHTML = $("#methodName1").val();
                tr.cells[1].innerHTML = $("#type1").val();
                tr.cells[2].innerHTML = $("#isneed1").val();
                tr.cells[3].innerHTML = $("#isStructure1").val();
                var content = $("#methodName1").val() + ";" + $("#type1").val() + ";" + $("#isneed1").val() + ";" + $("#isStructure1").val();
                $(document.getElementById(clickElement)).attr("content", content);
            }
            $("#myModal").modal("hide");

        }
        $(".error").css("color", "red"); // 没填数据显示红色提示
        $(".form-control").css("color", "black");
    });

    // 第二步，编辑或者新增一行
    $("#saveRowStructure").on("click", function(){
        // 删除空数据行
        if(2 == methodTable2.rows.length) { //只有两行的情况才有可能删除
            var  content = methodTable2.rows[1].cells.length;
            if(1 == content) {
                methodTable2.deleteRow(1);
            }
        }

        var flag = $("#methodForm2").valid(); // 判断表单是否通过验证
        if(flag) { //true表示通过表单验证
            if("0" == $(this).attr("flag")) { //新增行状态
                //  插入一行到table
                var insertObject = new Object();
                //insertObject.method = $("#method2").val();
                insertObject.paramname = $("#paramname").val();
                insertObject.paramtype = $("#paramtype").val();
                insertObject.isStructure = $("#isStructure").val();
                insertObject.sequence = $("#sequence").val();
                addRow2(insertObject);
                // 插入行之后，给编辑按钮绑定点击事件
                addRowsEdit2();
                //绑定删除事件
                deleteRows();
            } else { // 编辑行状态
                // 获取当前行
                var clickElement = $("#currentRow").val();
                var tr = document.getElementById(clickElement).parentNode.parentNode.parentNode; //获取当前行DOM
                //tr.cells[0].innerHTML = $("#method2").val();
                tr.cells[0].innerHTML = $("#paramname").val();
                tr.cells[1].innerHTML = $("#paramtype").val();
                tr.cells[2].innerHTML = $("#isStructure").val();
                tr.cells[3].innerHTML = $("#sequence").val();
                var content = $("#paramname").val() + ";" + $("#paramtype").val() + ";" + $("#isStructure").val() + ";" + $("#sequence").val();
                $(document.getElementById(clickElement)).attr("content", content);
            }
            $("#myModalStructure").modal("hide");

        }
        $(".error").css("color", "red"); // 没填数据显示红色提示
        $(".form-control").css("color", "black");
    });

    // 第三步，编辑或者新增一行
    $("#saveRowType").on("click", function(){
        // 删除空数据行
        if(2 == tableType.rows.length) { //只有两行的情况才有可能删除
            var  content = tableType.rows[1].cells.length;
            if(1 == content) {
                tableType.deleteRow(1);
            }
        }

        var flag = $("#methodForm3").valid(); // 判断表单是否通过验证
        if(flag) { //true表示通过表单验证
            if("0" == $(this).attr("flag")) { //新增行状态
                //  插入一行到table
                var insertObject = new Object();
                insertObject.parParamtype = $("#parParamtype").val();
                insertObject.paramname = $("#paramname3").val();
                insertObject.paramtype = $("#paramtype3").val();
                insertObject.isStructure = $("#isStructure3").val();
                addRow3(insertObject);
                // 插入行之后，给编辑按钮绑定点击事件
                addRowsEdit3();
                //绑定删除事件
                deleteRows();
            } else { // 编辑行状态
                // 获取当前行
                var clickElement = $("#currentRow").val();
                var tr = document.getElementById(clickElement).parentNode.parentNode.parentNode; //获取当前行DOM
                tr.cells[0].innerHTML = $("#parParamtype").val();
                tr.cells[1].innerHTML = $("#paramname3").val();
                tr.cells[2].innerHTML = $("#paramtype3").val();
                tr.cells[3].innerHTML = $("#isStructure3").val();
                var content = $("#parParamtype").val() + ";" + $("#paramname3").val() + ";" + $("#paramtype3").val() + ";" + $("#isStructure3").val();
                $(document.getElementById(clickElement)).attr("content", content);
            }
            $("#myModalType").modal("hide");

        }
        $(".error").css("color", "red"); // 没填数据显示红色提示
        $(".form-control").css("color", "black");
    });

    //第四步，新增或编辑一行
    $("#saveRowOuter").on("click", function() {
        // 删除空数据行
        if(2 == tableMethod4.rows.length) { //只有两行的情况才有可能删除
            var  content = tableMethod4.rows[1].cells.length;
            if(1 == content) {
                tableMethod4.deleteRow(1);
            }
        }

        var flag = $("#methodForm4").valid(); // 判断表单是否通过验证
        if(flag) { //true表示通过表单验证
            if("0" == $(this).attr("flag")) { //新增行状态
                //  插入一行到table
                var insertObject = new Object();
                insertObject.outerParam = $("#outer_param").val();
                insertObject.innerParam = $("#inner_param").val();
                insertObject.paramtype = $("#paramtype4").val();
                insertObject.ref = $("#ref").val();
                addRow4(insertObject);
                // 插入行之后，给编辑按钮绑定点击事件
                addRowsEdit4();
                //绑定删除事件
                deleteRows();
            } else { // 编辑行状态
                // 获取当前行
                var clickElement = $("#currentRow").val();
                var tr = document.getElementById(clickElement).parentNode.parentNode.parentNode; //获取当前行DOM
                tr.cells[0].innerHTML = $("#outer_param").val();
                tr.cells[1].innerHTML = $("#inner_param").val();
                tr.cells[2].innerHTML = $("#paramtype4").val();
                tr.cells[3].innerHTML = $("#ref").val();
                var content = $("#outer_param").val() + ";" + $("#inner_param").val() + ";" + $("#paramtype4").val() + ";" + $("#ref").val();
                $(document.getElementById(clickElement)).attr("content", content);
            }
            $("#myModalOuter").modal("hide");

        }
        $(".error").css("color", "red"); // 没填数据显示红色提示
        $(".form-control").css("color", "black");
    });

    // 编辑或新增一行
    $("#saveConfig").on("click", function(){
        // 删除空数据行
        if(2 == methodTable5.rows.length) { //只有两行的情况才有可能删除
            var  content = methodTable5.rows[1].cells.length;
            if(1 == content) {
                methodTable5.deleteRow(1);
            }
        }

        var flag = $("#methodForm5").valid(); // 判断表单是否通过验证
        if(flag) { //true表示通过表单验证
            if("0" == $(this).attr("flag")) { //新增行状态
                //  插入一行到table
                var insertObject = new Object();
                insertObject.logFlag = $("#isLog").val();
                insertObject.freqFlag = $("#isFreq").val();
                insertObject.freqLimit = $("#freqLimit").val();
                insertObject.innerOuterFlag = $("#innerOuterFlag").val();
                insertObject.serviceType = $("#serviceType").val();
                addRow5(insertObject);
                // 插入行之后，给编辑按钮绑定点击事件
                addRowsEdit5();
                //绑定删除事件
                deleteRows();
            } else { // 编辑行状态
                // 获取当前行
                var clickElement = $("#currentRow").val();
                var tr = document.getElementById(clickElement).parentNode.parentNode.parentNode; //获取当前行DOM
                tr.cells[0].innerHTML = $("#isLog").val();
                tr.cells[1].innerHTML = $("#isFreq").val();
                tr.cells[2].innerHTML = $("#freqLimit").val();
                tr.cells[3].innerHTML = $("#innerOuterFlag").val();
                tr.cells[4].innerHTML = $("#serviceType").val();
                var content = $("#isLog").val() + ";" + $("#isFreq").val() + ";" + $("#freqLimit").val() + ";" + $("#innerOuterFlag").val() +  ";" + $("#serviceType").val();
                $(document.getElementById(clickElement)).attr("content", content);
            }
            $("#configureModal").modal("hide");

        }
        $(".error").css("color", "red"); // 没填数据显示红色提示
        $(".form-control").css("color", "black");
    });

    //确定删除
    $("#sureDelete").on("click", function() {
        var deleteId = $("#deleteRow").val(); // 获取当前行的id
        var rowId = $(document.getElementById(deleteId)).parent().parent().attr("id"); // 对应数据库中的id
        if(typeof(rowId) == "string") { // 查询而来的行，需要从数据库删除
            if("step1" == $("#step").val()) {
                $.post("deleteMethod.json", { id:rowId }, function (d) {},'json');
            } else if("step2" == $("#step").val()) {
                $.post("deleteStructure.json", { id:rowId }, function (d) {},'json');
            } else if("step3" == $("#step").val()) {
                $.post("deleteType.json", { id:rowId }, function (d) {},'json');
            } else if("step4" == $("#step").val()) {
                $.post("deleteOuter.json", { id:rowId }, function (d) {},'json');
            } else if("step5" == $("#step").val()) {
                $.post("deleteConfig.json", {id:rowId}, function (d) {},'json');
            }

            $(document.getElementById(deleteId)).parent().parent().remove();
        } else {
            $(document.getElementById(deleteId)).parent().parent().remove();
        }


        $("#myDeleteModal").modal("hide");
    });

    // 给编辑按钮绑定点击事件
    $(".methodParams").on("click", function() {
        // 当前时间戳
        var timestamp = new Date().getTime();
        $(this).attr("id", timestamp);
        $("#currentRow").val(timestamp); // 存储当前id值到公共域

        // 改变标题为编辑状态
        $("#myModalLabel").html("编辑当前行");
        var tds = $(this).attr("content");
        var values = tds.split(";");
        $("#methodName1").val(values[0]);
        $("#type1").val(values[1]);
        $("#isneed1").val(values[2]);
        $("#isStructure1").val(values[3]);
        $("#saveRow").attr("flag", "1"); // 标记为编辑状态
        $("#myModal").modal("show");
    });



    // 第一步，表格底部插入一行
    function addRow(item) {
        var rowLen = methodTable.rows.length;
        var tr = methodTable.insertRow(rowLen);
        var content = item.paramname + ";" + item.paramtype + ";" + item.isneed + ";" + item.isStructure; // 作为编辑按钮的内容
        var oparate = '<a href="#" class="needTip" data-toggle="tooltip" data-placement="top" title="编辑" style="margin-left:5px;" ><span class="glyphicon glyphicon-pencil methodParams" aria-hidden="true" content=' + content + ' ></span></a><a href="#" class="needTip deleteCurrentRow" flag="step1" data-toggle="tooltip" data-placement="top" title="删除当前行" style="margin-left:5px;"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>';

        tr.innerHTML = "<td>" + item.paramname + "</td><td>" + item.paramtype + "</td><td>" + item.isneed + "</td><td>" + item.isStructure + "</td><td>" + oparate + "</td>";
        $(tr).attr("id", item.id);
    }

    // 第二步， 表格底部插入一行
    function addRow2(item) {
        var rowLen = methodTable2.rows.length;
        var tr = methodTable2.insertRow(rowLen);
        var content =  item.paramname + ";" + item.paramtype + ";" + item.isStructure + ";" + item.sequence; // 作为编辑按钮的内容
        var oparate = '<a href="#" class="needTip" data-toggle="tooltip" data-placement="top" title="编辑" style="margin-left:5px;" ><span class="glyphicon glyphicon-pencil methodStructure" aria-hidden="true" content=' + content + ' ></span></a><a href="#" class="needTip deleteCurrentRow" flag="step2" data-toggle="tooltip" data-placement="top" title="删除当前行" style="margin-left:5px;"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>';

        tr.innerHTML = "<td>" + item.paramname + "</td><td>" + item.paramtype + "</td><td>" + item.isStructure + "</td><td>" + item.sequence + "</td><td>" + oparate + "</td>";
        $(tr).attr("id", item.id);
    }
    // 第三步，表格底部插入一行
    function addRow3(item) {
        var rowLen = tableType.rows.length;
        var tr = tableType.insertRow(rowLen);
        var content = item.parParamtype + ";" + item.paramname + ";" + item.paramtype + ";" + item.isStructure; // 作为编辑按钮的内容
        var oparate = '<a href="#" class="needTip" data-toggle="tooltip" data-placement="top" title="编辑" style="margin-left:5px;" ><span class="glyphicon glyphicon-pencil methodType" aria-hidden="true" content=' + content + ' ></span></a><a href="#" class="needTip deleteCurrentRow" flag="step3" data-toggle="tooltip" data-placement="top" title="删除当前行" style="margin-left:5px;"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>';

        tr.innerHTML = "<td>" + item.parParamtype + "</td><td>" + item.paramname + "</td><td>" + item.paramtype + "</td><td>" + item.isStructure + "</td><td>" + oparate + "</td>";
        $(tr).attr("id", item.id);
    }

    // 第四步，表格底部插入一行
    function addRow4(item) {
        var rowLen = tableMethod4.rows.length;
        var tr = tableMethod4.insertRow(rowLen);
        var content = item.outerParam + ";" + item.innerParam + ";" + item.paramtype + ";" + item.ref; // 作为编辑按钮的内容
        var oparate = '<a href="#" class="needTip" data-toggle="tooltip" data-placement="top" title="编辑" style="margin-left:5px;" ><span class="glyphicon glyphicon-pencil methodOuter" aria-hidden="true" content=' + content + ' ></span></a><a href="#" class="needTip deleteCurrentRow" flag="step4" data-toggle="tooltip" data-placement="top" title="删除当前行" style="margin-left:5px;"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>';

        tr.innerHTML = "<td>" + item.outerParam + "</td><td>" + item.innerParam + "</td><td>" + item.paramtype + "</td><td>" + item.ref + "</td><td>" + oparate + "</td>";
        $(tr).attr("id", item.id);
    }

    // 第五步，表格底部插入一行
    function addRow5(item) {
        var rowLen = methodTable5.rows.length;
        var tr = methodTable5.insertRow(rowLen);
        var content = item.logFlag + ";" + item.freqFlag + ";" + item.freqLimit + ";" + item.innerOuterFlag + ";" + item.serviceType; // 作为编辑按钮的内容
        var oparate = '<a href="#" class="needTip" data-toggle="tooltip" data-placement="top" title="编辑" style="margin-left:5px;" ><span class="glyphicon glyphicon-pencil methodOuter" aria-hidden="true" content=' + content + ' ></span></a><a href="#" class="needTip deleteCurrentRow" flag="step5" data-toggle="tooltip" data-placement="top" title="删除当前行" style="margin-left:5px;"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></a>';

        tr.innerHTML = "<td>" + item.logFlag + "</td><td>" + item.freqFlag + "</td><td>" + item.freqLimit + "</td><td>" + item.innerOuterFlag + "</td><td>" + item.serviceType + "</td><td>" + oparate + "</td>";
        $(tr).attr("id", item.id);
    }

    // 删除行的绑定事件代码
    function deleteRows() {
        $(".deleteCurrentRow").on("click", function(event) {
            // 当前时间戳
            var timestamp = new Date().getTime();
            $(this).attr("id", timestamp);
            $("#deleteRow").val(timestamp); // 存储当前id值到公共域
            var step = $(this).attr("flag");
            $("#step").val(step);
            $("#myDeleteModal").modal("show");
        });
    }

    // 新增行的绑定编辑事件代码
    function addRowsEdit() {
        $(".methodParams").on("click", function() {
            // 当前时间戳
            var timestamp = new Date().getTime();
            $(this).attr("id", timestamp);
            $("#currentRow").val(timestamp); // 存储当前id值到公共域

            // 改变标题为编辑状态
            $("#myModalLabel").html("编辑当前行");
            var tds = $(this).attr("content");
            var values = tds.split(";");
            $("#methodName1").val(values[0]);
            $("#type1").val(values[1]);
            $("#isneed1").val(values[2]);
            $("#isStructure1").val(values[3]);
            $("#saveRow").attr("flag", "1"); // 标记为编辑状态
            $("#myModal").modal("show");
        });
    }

    // 第二步，新增行的绑定编辑事件代码
    function addRowsEdit2() {
        $(".methodStructure").on("click", function() {
            // 当前时间戳
            var timestamp = new Date().getTime();
            $(this).attr("id", timestamp);
            $("#currentRow").val(timestamp); // 存储当前id值到公共域

            // 改变标题为编辑状态
            $("#myModalLabel2").html("编辑当前行");
            var tds = $(this).attr("content");
            var values = tds.split(";");
            //$("#method2").val(values[0]);
            $("#paramname").val(values[0]);
            $("#paramtype").val(values[1]);
            $("#isStructure").val(values[2]);
            $("#sequence").val(values[3]);
            $("#saveRowStructure").attr("flag", "1"); // 标记为编辑状态
            $("#myModalStructure").modal("show");
        });
    }
    // 第三步，新增行的绑定编辑事件代码
    function addRowsEdit3() {
        $(".methodType").on("click", function() {
            // 当前时间戳
            var timestamp = new Date().getTime();
            $(this).attr("id", timestamp);
            $("#currentRow").val(timestamp); // 存储当前id值到公共域

            // 改变标题为编辑状态
            $("#myModalLabel3").html("编辑当前行");
            var tds = $(this).attr("content");
            var values = tds.split(";");
            $("#parParamtype").val(values[0]);
            $("#paramname3").val(values[1]);
            $("#paramtype3").val(values[2]);
            $("#isStructure3").val(values[3]);
            $("#saveRowType").attr("flag", "1"); // 标记为编辑状态
            $("#myModalType").modal("show");
        });
    }

    // 第4步，新增行的绑定编辑事件代码
    function addRowsEdit4() {
        $(".methodOuter").on("click", function() {
            // 当前时间戳
            var timestamp = new Date().getTime();
            $(this).attr("id", timestamp);
            $("#currentRow").val(timestamp); // 存储当前id值到公共域

            // 改变标题为编辑状态
            $("#myModalLabel4").html("编辑当前行");
            var tds = $(this).attr("content");
            var values = tds.split(";");
            $("#outer_param").val(values[0]);
            $("#inner_param").val(values[1]);
            $("#paramtype4").val(values[2]);
            $("#ref").val(values[3]);
            $("#saveRowOuter").attr("flag", "1"); // 标记为编辑状态
            $("#myModalOuter").modal("show");
        });
    }

    // 第5步，新增行的绑定编辑事件代码
    function addRowsEdit5() {
        $(".methodOuter").on("click", function() {
            // 当前时间戳
            var timestamp = new Date().getTime();
            $(this).attr("id", timestamp);
            $("#currentRow").val(timestamp); // 存储当前id值到公共域

            // 改变标题为编辑状态
            $("#myModalLabel5").html("编辑当前行");
            var tds = $(this).attr("content");
            var values = tds.split(";");
            $("#isLog").val(values[0]);
            $("#isFreq").val(values[1]);
            $("#freqLimit").val(values[2]);
            $("#innerOuterFlag").val(values[3]);
            $("#serviceType").val(values[4]);
            $("#requestType").val(values[5]);

            $("#saveConfig").attr("flag", "1"); // 标记为编辑状态
            $("#configureModal").modal("show");
        });
    }



})